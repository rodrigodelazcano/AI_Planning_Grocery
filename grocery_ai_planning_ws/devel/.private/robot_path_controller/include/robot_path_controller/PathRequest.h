// Generated by gencpp from file robot_path_controller/PathRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_PATH_CONTROLLER_MESSAGE_PATHREQUEST_H
#define ROBOT_PATH_CONTROLLER_MESSAGE_PATHREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_path_controller/WayPoint.h>

namespace robot_path_controller
{
template <class ContainerAllocator>
struct PathRequest_
{
  typedef PathRequest_<ContainerAllocator> Type;

  PathRequest_()
    : waypoints()  {
    }
  PathRequest_(const ContainerAllocator& _alloc)
    : waypoints(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::robot_path_controller::WayPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robot_path_controller::WayPoint_<ContainerAllocator> >::other >  _waypoints_type;
  _waypoints_type waypoints;





  typedef boost::shared_ptr< ::robot_path_controller::PathRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_path_controller::PathRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PathRequest_

typedef ::robot_path_controller::PathRequest_<std::allocator<void> > PathRequest;

typedef boost::shared_ptr< ::robot_path_controller::PathRequest > PathRequestPtr;
typedef boost::shared_ptr< ::robot_path_controller::PathRequest const> PathRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_path_controller::PathRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_path_controller::PathRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_path_controller::PathRequest_<ContainerAllocator1> & lhs, const ::robot_path_controller::PathRequest_<ContainerAllocator2> & rhs)
{
  return lhs.waypoints == rhs.waypoints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_path_controller::PathRequest_<ContainerAllocator1> & lhs, const ::robot_path_controller::PathRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_path_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_path_controller::PathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_path_controller::PathRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_path_controller::PathRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_path_controller::PathRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_path_controller::PathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_path_controller::PathRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_path_controller::PathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a3dd1257e900c61a9be94461a23de321";
  }

  static const char* value(const ::robot_path_controller::PathRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa3dd1257e900c61aULL;
  static const uint64_t static_value2 = 0x9be94461a23de321ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_path_controller::PathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_path_controller/PathRequest";
  }

  static const char* value(const ::robot_path_controller::PathRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_path_controller::PathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "WayPoint[] waypoints\n"
"\n"
"================================================================================\n"
"MSG: robot_path_controller/WayPoint\n"
"float64[2] coord\n"
;
  }

  static const char* value(const ::robot_path_controller::PathRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_path_controller::PathRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.waypoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_path_controller::PathRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_path_controller::PathRequest_<ContainerAllocator>& v)
  {
    s << indent << "waypoints[]" << std::endl;
    for (size_t i = 0; i < v.waypoints.size(); ++i)
    {
      s << indent << "  waypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robot_path_controller::WayPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.waypoints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_PATH_CONTROLLER_MESSAGE_PATHREQUEST_H
